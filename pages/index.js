import Head from 'next/head'
import { db, auth } from '../utils/firebase';
import React, { useCallback, useEffect, useState } from 'react'
import axios from 'axios'
import { addDoc, collection, doc, onSnapshot, orderBy, query, serverTimestamp } from 'firebase/firestore'
import CharacterInfo from '../components/CharacterInfo';
import { toast } from 'react-toastify'
import { useRouter } from 'next/router'
import { useAuthState } from 'react-firebase-hooks/auth';

export function requestCharacter(realm, characterName, accessToken) {

  const url = `https://us.api.blizzard.com/profile/wow/character/${realm.toLowerCase()}/${characterName.toLowerCase()}/pvp-bracket/3v3?namespace=profile-us&locale=en_US&access_token=${accessToken}`
  return axios.get(url)
}

export default function Home(props) {
  const { token } = props
  const [user, loading] = useAuthState(auth);
  const route = useRouter();
  const [realm, setRealm] = useState('')
  const [characterName, setCharacterName] = useState('')

  useEffect(() => {
    if (!token) return;

    getCharacters();
  }, [token])

  const addCharacter = useCallback(() => {
    requestCharacter(realm, characterName, token)
      .then((response) => {
        const collectionRef = collection(db, 'character');
        addDoc(collectionRef, {
          characterName,
          realm,
          timestamp: serverTimestamp(),
        });
        console.log(response.data)
      })
    setCharacterName('')
    setRealm('')

  }, [characterName, realm])

  const [allCharacters, setAllCharacters] = useState([]);

  const getCharacters = async () => {
    const collectionRef = collection(db, 'character');
    const q = query(collectionRef, orderBy('timestamp', 'desc'));
    const unsubscribe = onSnapshot(q, async (snapshot) => {
      const characterPromises = snapshot.docs.map(async (doc) => {
        const account = doc.data();
        const response = await requestCharacter(account.realm, account.characterName, token);
        return {
          ...account,
          ...response.data,
          id: doc.id,
        }
      })

      const characters = await Promise.all(characterPromises);

      console.log(characters);
      setAllCharacters(characters);

    });
    return unsubscribe;

  }


  return (
    <>
      <Head>
        <title>PvP Tracker</title>
        <meta name="description" content="Generated by create next app" />
      </Head>
      <div className="md:max-w-2xl md:mx-auto font-poppins">
        <div className='grid gap-6 mb-2 md:grid-cols-3'>
          <input
            className='bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500'
            required
            value={characterName}
            onChange={event => setCharacterName(event.target.value)}
            placeholder="Enter Character Name"
            type='text' />
          <input
            className='bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500'
            required
            value={realm}
            onChange={event => setRealm(event.target.value)}
            placeholder="Enter Realm"
            type='text' />
          {!user ? (
            <button disabled className=' bg-blue-100 hover:bg-blue-200 text-white font-bold py-1 px-2 rounded' onClick={addCharacter}>Submit</button>
          ) : (<button className=' bg-slate-800 hover:bg-slate-600 text-white font-bold py-1 px-2 rounded' onClick={addCharacter}>Submit</button>
          )}
        </div>
        <div className="relative overflow-x-auto">
          <table className='mt-3 w-full text-sm text-left text-gray-500 dark:text-gray-400'>
            <thead className="text-xs text-gray-700 uppercase bg-gray-50 dark:bg-gray-700 dark:text-gray-400">
              <tr>
                <th scope='col' className='px-6 py-3'>
                  Character Name
                </th>
                <th scope='col' className='px-6 py-3'>
                  Faction
                </th>
                <th scope='col' className='px-6 py-3'>
                  Rating
                </th>
                <th scope='col' className='px-6 py-3'>
                  Wins
                </th>
                <th scope='col' className='px-6 py-3'>
                  Losses
                </th>
                <th scope='col' className='px-6 py-3'>
                  Win %
                </th>
              </tr>
            </thead>
            <tbody>
              {allCharacters.map(character => {
                return (
                  <CharacterInfo
                    characterName={character.characterName}
                    faction={character.faction ? character.faction.type : null}
                    realm={character.realm}
                    key={character.id}
                    rating={character.rating}
                    wins={character.season_match_statistics ? character.season_match_statistics.won : null}
                    losses={character.season_match_statistics ? character.season_match_statistics.lost : null}
                  />
                )
              })}
            </tbody>
          </table>
        </div>
      </div>
    </>
  )
}


export async function getServerSideProps() {


  const response = await fetch('https://oauth.battle.net/token', {
    method: 'POST',
    body: 'grant_type=client_credentials',
    headers: {
      'Content-Type': 'application/x-www-form-urlencoded',
      Authorization: 'Basic ' + btoa('71d63e5c4040494bac32792a62c04d26:hN84nmdkLA40kBM5zU2ede16Dy5TxdO6')
    }
  })

  const token = await response.json();

  return {
    props: {
      token: token.access_token
    }
  }
}